const[t,e,r]=(()=>{const t="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^*()-=;,./_+{}|:?~",e=256;function r(t){let e=1,r=0;for(;e<=1099511627776;)e*=t,++r;e=Math.floor(e/(t*t));const n=Math.floor(e/t);--r;let o=1,h=1;for(;h<256;)h*=t,++o;return[e,n,o,r]}class StringBuilder{constructor(){this.chunks=[],this.currChunk=[],this.currChunkLength=0}add(t){this.currChunkLength>=1024&&(this.chunks.push(this.currChunk.join("")),this.currChunk.length=0,this.currChunkLength=0),this.currChunk.push(t),this.currChunkLength+=t.length}toString(){return this.chunks.concat(this.currChunk).join("")}}function n(t){return" \n\r\t\v\f\u00A0\u2028\u2029".includes(t)}return[t,class Encoder{constructor(r=t){if(r.length<2)throw new Error("alphabet must have at least 2 characters");if(r.length>e)throw new Error("alphabet must not contain more than 256 characters");if(new Set(r).size<r.length)throw new Error("alphabet must contain unique characters");this.encodingTable=r}encode(t){const e=this.encodingTable.length,[n,o,h,i]=r(e),a=new StringBuilder;let c=0,s=0,l=n*e-1,u=0,d=0;for(const r of t){const t=s+Math.ceil((l-s+1)*r*(1/256)),i=s+(Math.ceil((l-s+1)*(r+1)*(1/256))-1);s=t,l=i;for(let t=h;t--;){let t=Math.floor(s/n),r=Math.floor(l/n);if(r-t==1){if(Math.floor(s/o)%e!=e-1||Math.floor(l/o)%e!=0)break;s=t*n+s%o*e,l=r*n+l%o*e,++u,d=r}else{if(t!==r)break;if(a.add(this.encodingTable[r]),u>0){const t=this.encodingTable[r===d?0:e-1];for(;u>0;--u)a.add(t)}s=s%n*e,l=l%n*e}}++c}if(a.add(this.encodingTable[Math.floor(l/n)]),u>0){const t=this.encodingTable[0];for(;u>0;--u)a.add(t)}return a.add(this.encodingTable[c%2]),a.toString()}encodeFromString(t){return this.encode((new TextEncoder).encode(t))}},class Decoder{constructor(r=t){if(r.length<2)throw new Error("alphabet must have at least 2 characters");if(r.length>e)throw new Error("alphabet must not contain more than 256 characters");this.decodingTable=new Map;for(let t=r.length;t--;)this.decodingTable.set(r.charCodeAt(t),t);if(this.decodingTable.size<r.length)throw new Error("alphabet must contain unique characters")}decode(t){return function*(t,e){const o=t.length-1;if(o<0||!e.has(t.charCodeAt(o)))throw new Error("invalid input string");const h=e.get(t.charCodeAt(o));if(h>1)throw new Error("invalid input string");const i=e.size,[a,c,s,l]=r(i);let u=0,d=0,f=a*i-1,g=0,w=0,b=l,M=0,k=!1;for(;;){for(;b>0;){let r;if(g<o){const o=t.charCodeAt(g);if(!e.has(o)){if(n(t[g])){++g;continue}throw new Error("invalid input string")}r=e.get(o)}else r=0,g-o==l-2&&(k=!0);if(++g,b===M){w=Math.floor(w/a)*a+w%c*i+r,--M}else w=w%a*i+r;--b}const r=Math.floor(256*(w-d)/(f-d+1));if(k)return void(u%2!==h&&(yield r));yield r;const T=d+Math.ceil((f-d+1)*r*(1/256)),p=d+(Math.ceil((f-d+1)*(r+1)*(1/256))-1);d=T,f=p;for(let t=s;t--;){let t=Math.floor(d/a),e=Math.floor(f/a);if(e-t==1){if(Math.floor(d/c)%i!=i-1||Math.floor(f/c)%i!=0)break;d=t*a+d%c*i,f=e*a+f%c*i,++b,++M}else{if(t!==e)break;d=d%a*i,f=f%a*i,++b}}++u}}(t,this.decodingTable)}decodeToString(t){return(new TextDecoder).decode(new Uint8Array([...this.decode(t)]))}}]})();export{t as DEFAULT_ALPHABET,e as Encoder,r as Decoder};
